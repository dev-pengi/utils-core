"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[1153],{3905:(e,t,r)=>{r.d(t,{Zo:()=>m,kt:()=>f});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function l(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?l(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):l(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function o(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},l=Object.keys(e);for(n=0;n<l.length;n++)r=l[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)r=l[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var s=n.createContext({}),u=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},m=function(e){var t=u(e.components);return n.createElement(s.Provider,{value:t},e.children)},c="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,l=e.originalType,s=e.parentName,m=o(e,["components","mdxType","originalType","parentName"]),c=u(r),d=a,f=c["".concat(s,".").concat(d)]||c[d]||p[d]||l;return r?n.createElement(f,i(i({ref:t},m),{},{components:r})):n.createElement(f,i({ref:t},m))}));function f(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var l=r.length,i=new Array(l);i[0]=d;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o[c]="string"==typeof e?e:a,i[1]=o;for(var u=2;u<l;u++)i[u]=r[u];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},1704:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>p,frontMatter:()=>l,metadata:()=>o,toc:()=>u});var n=r(7462),a=(r(7294),r(3905));const l={sidebar_position:4,id:"normalizeValues",title:"normalizeValues",sidebar_label:"normalizeValues"},i=void 0,o={unversionedId:"math/normalizeValues",id:"math/normalizeValues",title:"normalizeValues",description:"The normalizeValues() function normalizes an array of numbers so that they fall within a specific range.",source:"@site/docs/math/normalizeValues.md",sourceDirName:"math",slug:"/math/normalizeValues",permalink:"/utils-core-docs/docs/math/normalizeValues",draft:!1,editUrl:"https://github.com/dev-pengi/utils-core-docs/tree/main/docs/math/normalizeValues.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4,id:"normalizeValues",title:"normalizeValues",sidebar_label:"normalizeValues"},sidebar:"tutorialSidebar",previous:{title:"getAverage",permalink:"/utils-core-docs/docs/math/getAverage"},next:{title:"Time utils",permalink:"/utils-core-docs/docs/category/time-utils"}},s={},u=[{value:"Parameters",id:"parameters",level:3},{value:"Returns",id:"returns",level:3},{value:"Throws",id:"throws",level:3},{value:"Example",id:"example",level:3}],m={toc:u},c="wrapper";function p(e){let{components:t,...r}=e;return(0,a.kt)(c,(0,n.Z)({},m,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"normalizeValues()")," function normalizes an array of numbers so that they fall within a specific range."),(0,a.kt)("h3",{id:"parameters"},"Parameters"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"nums")," (",(0,a.kt)("inlineCode",{parentName:"li"},"Array"),"): The array of numbers to normalize"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"min")," (",(0,a.kt)("inlineCode",{parentName:"li"},"Number"),"): The minimum value of the new range, it's set to 0 by default"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"max")," (",(0,a.kt)("inlineCode",{parentName:"li"},"Number"),"): The maximum value of the new range, it's set to 1 by default")),(0,a.kt)("h3",{id:"returns"},"Returns"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Array"),": The normalized array of numbers")),(0,a.kt)("h3",{id:"throws"},"Throws"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Error"),": If the input is not an array or if the array is empty"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Error"),": If min is greater than or equal to max")),(0,a.kt)("h3",{id:"example"},"Example"),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"using the default range: ","[0, 1]")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"const utils = require('utils-core.js');\nconst nums = [10, 20, 30, 40, 50];\nconst normalized = utils.math.normalizeValues(nums);\nconsole.log(normalized);\n// output: [0, 0.25, 0.5, 0.75, 1]\n")),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"using the range: ","[10, 50]")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"const utils = require('utils-core.js');\nconst nums = [10, 20, 30, 40, 50];\nconst min = 10;\nconst max = 50;\nconst normalized = normalizeValues(nums, min, max);\nconsole.log(normalized);\n// output: [10, 18, 26, 34, 42]\n")))}p.isMDXComponent=!0}}]);