"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[869],{3905:(e,r,t)=>{t.d(r,{Zo:()=>u,kt:()=>g});var a=t(7294);function n(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function l(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);r&&(a=a.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?l(Object(t),!0).forEach((function(r){n(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function s(e,r){if(null==e)return{};var t,a,n=function(e,r){if(null==e)return{};var t,a,n={},l=Object.keys(e);for(a=0;a<l.length;a++)t=l[a],r.indexOf(t)>=0||(n[t]=e[t]);return n}(e,r);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)t=l[a],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(n[t]=e[t])}return n}var i=a.createContext({}),c=function(e){var r=a.useContext(i),t=r;return e&&(t="function"==typeof e?e(r):o(o({},r),e)),t},u=function(e){var r=c(e.components);return a.createElement(i.Provider,{value:r},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var r=e.children;return a.createElement(a.Fragment,{},r)}},d=a.forwardRef((function(e,r){var t=e.components,n=e.mdxType,l=e.originalType,i=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),p=c(t),d=n,g=p["".concat(i,".").concat(d)]||p[d]||m[d]||l;return t?a.createElement(g,o(o({ref:r},u),{},{components:t})):a.createElement(g,o({ref:r},u))}));function g(e,r){var t=arguments,n=r&&r.mdxType;if("string"==typeof e||n){var l=t.length,o=new Array(l);o[0]=d;var s={};for(var i in r)hasOwnProperty.call(r,i)&&(s[i]=r[i]);s.originalType=e,s[p]="string"==typeof e?e:n,o[1]=s;for(var c=2;c<l;c++)o[c]=t[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,t)}d.displayName="MDXCreateElement"},4945:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>i,contentTitle:()=>o,default:()=>m,frontMatter:()=>l,metadata:()=>s,toc:()=>c});var a=t(7462),n=(t(7294),t(3905));const l={sidebar_position:1,id:"calculateProgress",title:"calculateProgress",sidebar_label:"calculateProgress"},o=void 0,s={unversionedId:"math/calculateProgress",id:"math/calculateProgress",title:"calculateProgress",description:"The calculateProgress() function calculates the progress made towards a goal, given the current progress.",source:"@site/docs/math/calculateProgress.md",sourceDirName:"math",slug:"/math/calculateProgress",permalink:"/utils-core/docs/math/calculateProgress",draft:!1,editUrl:"https://github.com/dev-pengi/utils-core/tree/main/docs/math/calculateProgress.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1,id:"calculateProgress",title:"calculateProgress",sidebar_label:"calculateProgress"},sidebar:"tutorialSidebar",previous:{title:"Math utils",permalink:"/utils-core/docs/category/math-utils"},next:{title:"clamp",permalink:"/utils-core/docs/math/clamp"}},i={},c=[{value:"Parameters",id:"parameters",level:3},{value:"Returns",id:"returns",level:3},{value:"Throws",id:"throws",level:3},{value:"Example",id:"example",level:3}],u={toc:c},p="wrapper";function m(e){let{components:r,...t}=e;return(0,n.kt)(p,(0,a.Z)({},u,t,{components:r,mdxType:"MDXLayout"}),(0,n.kt)("p",null,"The ",(0,n.kt)("inlineCode",{parentName:"p"},"calculateProgress()")," function calculates the progress made towards a goal, given the current progress."),(0,n.kt)("h3",{id:"parameters"},"Parameters"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"current")," (",(0,n.kt)("inlineCode",{parentName:"li"},"Number"),"): The current progress towards the goal."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"goal")," (",(0,n.kt)("inlineCode",{parentName:"li"},"Number"),"): The required progress towards the goal.")),(0,n.kt)("h3",{id:"returns"},"Returns"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"Number"),": The progress made towards the goal, as a percentage between 0 and 1.")),(0,n.kt)("h3",{id:"throws"},"Throws"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"Error"),": Will throw an error if the current or goal values are not numbers or are negative.")),(0,n.kt)("h3",{id:"example"},"Example"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-js"},"const utils = require('utils-core.js');\nconst current = 345;\nconst required = 1000;\nconst progress = utils.math.calculateProgress(current, required);\nconsole.log(progress);\n//output: 0.34\n")))}m.isMDXComponent=!0}}]);