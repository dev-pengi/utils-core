"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[2891],{3905:(e,t,a)=>{a.d(t,{Zo:()=>u,kt:()=>k});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},l=Object.keys(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var m=n.createContext({}),p=function(e){var t=n.useContext(m),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},u=function(e){var t=p(e.components);return n.createElement(m.Provider,{value:t},e.children)},c="mdxType",s={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,l=e.originalType,m=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),c=p(a),d=r,k=c["".concat(m,".").concat(d)]||c[d]||s[d]||l;return a?n.createElement(k,i(i({ref:t},u),{},{components:a})):n.createElement(k,i({ref:t},u))}));function k(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=a.length,i=new Array(l);i[0]=d;var o={};for(var m in t)hasOwnProperty.call(t,m)&&(o[m]=t[m]);o.originalType=e,o[c]="string"==typeof e?e:r,i[1]=o;for(var p=2;p<l;p++)i[p]=a[p];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}d.displayName="MDXCreateElement"},3469:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>m,contentTitle:()=>i,default:()=>s,frontMatter:()=>l,metadata:()=>o,toc:()=>p});var n=a(7462),r=(a(7294),a(3905));const l={sidebar_position:2,id:"clamp",title:"clamp",sidebar_label:"clamp"},i=void 0,o={unversionedId:"math/clamp",id:"math/clamp",title:"clamp",description:"The clamp() function clamps a value between a minimum and maximum value.",source:"@site/docs/math/clamp.md",sourceDirName:"math",slug:"/math/clamp",permalink:"/docs/math/clamp",draft:!1,editUrl:"https://github.com/dev-pengi/utils-core-docs/tree/main/docs/math/clamp.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2,id:"clamp",title:"clamp",sidebar_label:"clamp"},sidebar:"tutorialSidebar",previous:{title:"calculateProgress",permalink:"/docs/math/calculateProgress"},next:{title:"getAverage",permalink:"/docs/math/getAverage"}},m={},p=[{value:"Parameters",id:"parameters",level:3},{value:"Returns",id:"returns",level:3},{value:"Throws",id:"throws",level:3},{value:"Example",id:"example",level:3}],u={toc:p},c="wrapper";function s(e){let{components:t,...a}=e;return(0,r.kt)(c,(0,n.Z)({},u,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"clamp()")," function clamps a value between a minimum and maximum value."),(0,r.kt)("h3",{id:"parameters"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Parameter"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"value")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"Number")),(0,r.kt)("td",{parentName:"tr",align:null},"The value to be clamped.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"min")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"Number")),(0,r.kt)("td",{parentName:"tr",align:null},"The minimum value that ",(0,r.kt)("inlineCode",{parentName:"td"},"value")," can be.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"max")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"Number")),(0,r.kt)("td",{parentName:"tr",align:null},"The maximum value that ",(0,r.kt)("inlineCode",{parentName:"td"},"value")," can be.")))),(0,r.kt)("h3",{id:"returns"},"Returns"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Number"),": The clamped value")),(0,r.kt)("h3",{id:"throws"},"Throws"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Error"),": Will throw an error if ",(0,r.kt)("strong",{parentName:"li"},"value"),", ",(0,r.kt)("strong",{parentName:"li"},"min"),", or ",(0,r.kt)("strong",{parentName:"li"},"max")," is not a number.")),(0,r.kt)("h3",{id:"example"},"Example"),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"at velue that is less than ",(0,r.kt)("strong",{parentName:"p"},"min"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const utils = require('utils-core.js');\nconst current = 5;\nconst min = 10;\nconst max = 50;\nconst clampedValue = utils.math.clamp(current, min, max);\nconsole.log(clampedValue);\n//output: 10\n")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"at velue that is greater than ",(0,r.kt)("strong",{parentName:"p"},"max"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const utils = require('utils-core.js');\nconst current = 100;\nconst min = 10;\nconst max = 50;\nconst clampedValue = utils.math.clamp(current, min, max);\nconsole.log(clampedValue);\n//output: 50\n")))}s.isMDXComponent=!0}}]);