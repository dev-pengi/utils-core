"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[4665],{3905:(e,t,n)=>{n.d(t,{Zo:()=>m,kt:()=>d});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},m=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},b=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,m=s(e,["components","mdxType","originalType","parentName"]),p=c(n),b=o,d=p["".concat(l,".").concat(b)]||p[b]||u[b]||a;return n?r.createElement(d,i(i({ref:t},m),{},{components:n})):r.createElement(d,i({ref:t},m))}));function d(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=b;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[p]="string"==typeof e?e:o,i[1]=s;for(var c=2;c<a;c++)i[c]=n[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}b.displayName="MDXCreateElement"},2692:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>u,frontMatter:()=>a,metadata:()=>s,toc:()=>c});var r=n(7462),o=(n(7294),n(3905));const a={sidebar_position:2,id:"merge",title:"merge",sidebar_label:"merge"},i=void 0,s={unversionedId:"objects/merge",id:"objects/merge",title:"merge",description:"The mergeObjects() function merges two or more objects into a new object.",source:"@site/docs/objects/merge.md",sourceDirName:"objects",slug:"/objects/merge",permalink:"/utils-core/docs/objects/merge",draft:!1,editUrl:"https://github.com/dev-pengi/utils-core/tree/main/docs/objects/merge.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2,id:"merge",title:"merge",sidebar_label:"merge"},sidebar:"tutorialSidebar",previous:{title:"flatten",permalink:"/utils-core/docs/objects/flatten"},next:{title:"Math utils",permalink:"/utils-core/docs/category/math-utils"}},l={},c=[{value:"Parameters",id:"parameters",level:3},{value:"Returns",id:"returns",level:3},{value:"Examples",id:"examples",level:3}],m={toc:c},p="wrapper";function u(e){let{components:t,...n}=e;return(0,o.kt)(p,(0,r.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"mergeObjects()")," function merges two or more objects into a new object."),(0,o.kt)("h3",{id:"parameters"},"Parameters"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"objects")," (",(0,o.kt)("inlineCode",{parentName:"li"},"Objects"),"): objects The objects to merge.")),(0,o.kt)("h3",{id:"returns"},"Returns"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"Object"),": The merged object.")),(0,o.kt)("h3",{id:"examples"},"Examples"),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"Merging two objects")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'const utils = require(\'utils-core.js\');\nconst object1 = {\n  name: "sif",\n  age: 30,\n  hobbies: ["reading", "running"]\n};\n\nconst object2 = {\n  address: {\n    street: "123 Main St",\n    city: "New York",\n    state: "NY"\n  },\n  contact: {\n    email: "sif@sifedine.lol",\n    phone: "555-1234"\n  }\n};\n\nconst mergedObj = utils.objects.mergeObjects(object1, object2);\n\nconsole.log(mergedObj);\n\n// Output: {\n//   name: "sif",\n//   age: 30,\n//   hobbies: ["reading", "running"],\n//   address: {\n//     street: "123 Main St",\n//     city: "New York",\n//     state: "NY"\n//   },\n//   contact: {\n//     email: "sif@sifedine.lol",\n//     phone: "555-1234"\n//   }\n// }\n')),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"Merging three objects")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'const utils = require(\'utils-core.js\');\nconst object1 = {\n  name: "sif",\n  age: 30,\n  hobbies: ["reading", "running"]\n};\n\nconst object2 = {\n  address: {\n    street: "123 Main St",\n    city: "New York",\n    state: "NY"\n  }\n};\n\nconst object3 = {\n  contact: {\n    email: "sif@sifedine.lol",\n    phone: "555-1234"\n  }\n};\n\nconst mergedObj = utils.objects.mergeObjects(object1, object2, object3);\n\nconsole.log(mergedObj);\n\n// Output: {\n//   name: "sif",\n//   age: 30,\n//   hobbies: ["reading", "running"],\n//   address: {\n//     street: "123 Main St",\n//     city: "New York",\n//     state: "NY"\n//   },\n//   contact: {\n//     email: "sif@sifedine.lol",\n//     phone: "555-1234"\n//   }\n// }\n')),(0,o.kt)("admonition",{type:"info"},(0,o.kt)("p",{parentName:"admonition"},"when merging objects with overlapping keys (keys that exists in two or more objects), the last objects with the key will overrides the ones before it."),(0,o.kt)("blockquote",{parentName:"admonition"},(0,o.kt)("p",{parentName:"blockquote"},"For example merging two objects that has ",(0,o.kt)("strong",{parentName:"p"},"age")," key:")),(0,o.kt)("pre",{parentName:"admonition"},(0,o.kt)("code",{parentName:"pre",className:"language-js"},'const utils = require(\'utils-core.js\');\nconst object1 = {\n  name: "sif",\n  age: 30,\n  hobbies: ["reading", "running"]\n};\n\nconst object2 = {\n  age: 35,\n  address: {\n    street: "123 Main St",\n    city: "New York",\n    state: "NY"\n  },\n  contact: {\n    email: "sif@sifedine.lol",\n    phone: "555-1234"\n  }\n};\n\nconst mergedObj = utils.objects.mergeObjects(object1, object2);\n\nconsole.log(mergedObj);\n\n// Output: {\n//   name: "sif",\n//   age: 35, // value from object2 overwrites value from object1\n//   hobbies: ["reading", "running"],\n//   address: {\n//     street: "123 Main St",\n//     city: "New York",\n//     state: "NY"\n//   },\n//   contact: {\n//     email: "sif@sifedine.lol",\n//     phone: "555-1234"\n//   }\n// }\n')),(0,o.kt)("h3",{parentName:"admonition",id:"in-this-example-we-have"},"In this example we have:"),(0,o.kt)("ul",{parentName:"admonition"},(0,o.kt)("li",{parentName:"ul"},"The age value from ",(0,o.kt)("inlineCode",{parentName:"li"},"object2")," overwrites value from ",(0,o.kt)("inlineCode",{parentName:"li"},"object1"))),(0,o.kt)("blockquote",{parentName:"admonition"},(0,o.kt)("p",{parentName:"blockquote"},"Merging three objects with overlapping keys:")),(0,o.kt)("pre",{parentName:"admonition"},(0,o.kt)("code",{parentName:"pre",className:"language-js"},'const utils = require(\'utils-core.js\');\nconst object1 = {\n  name: "Alice",\n  age: 30,\n  hobbies: ["reading", "yoga"],\n  address: {\n    street: "123 Main St",\n    city: "New York",\n    state: "NY"\n  }\n};\n\nconst object2 = {\n  age: 35,\n  hobbies: ["running", "swimming"],\n  address: {\n    street: "456 Elm St",\n    city: "Boston",\n    state: "MA",\n    zip: "02115"\n  }\n};\n\nconst object3 = {\n  name: "Bob",\n  hobbies: ["painting"],\n  address: {\n    city: "San Francisco"\n  }\n};\n\nconst mergedObj = utils.objects.mergeObjects(object1, object2, object3);\n\nconsole.log(mergedObj);\n\n// Output: {\n//   name: "Bob",\n//   age: 35, // \n//   hobbies: ["painting"],\n//   address: {\n//     street: "456 Elm St",\n//     city: "San Francisco",\n//     state: "MA",\n//     zip: "02115"\n//   }\n// }\n')),(0,o.kt)("h3",{parentName:"admonition",id:"in-this-example-we-have-1"},"In this example we have:"),(0,o.kt)("ul",{parentName:"admonition"},(0,o.kt)("li",{parentName:"ul"},"The name value from ",(0,o.kt)("inlineCode",{parentName:"li"},"object3")," overwrites value from ",(0,o.kt)("inlineCode",{parentName:"li"},"object1")),(0,o.kt)("li",{parentName:"ul"},"The age value from ",(0,o.kt)("inlineCode",{parentName:"li"},"object2")," overwrites value from ",(0,o.kt)("inlineCode",{parentName:"li"},"object1")),(0,o.kt)("li",{parentName:"ul"},"The hobbies value from ",(0,o.kt)("inlineCode",{parentName:"li"},"object3")," overwrites value from ",(0,o.kt)("inlineCode",{parentName:"li"},"object2"),", which overwrote value from ",(0,o.kt)("inlineCode",{parentName:"li"},"object1")),(0,o.kt)("li",{parentName:"ul"},"The street value from ",(0,o.kt)("inlineCode",{parentName:"li"},"object2")," overwrites value from ",(0,o.kt)("inlineCode",{parentName:"li"},"object1")),(0,o.kt)("li",{parentName:"ul"},"The city value from ",(0,o.kt)("inlineCode",{parentName:"li"},"object2")," overwrites value from ",(0,o.kt)("inlineCode",{parentName:"li"},"object1")),(0,o.kt)("li",{parentName:"ul"},"The city value from ",(0,o.kt)("inlineCode",{parentName:"li"},"object3")," overwrites value from ",(0,o.kt)("inlineCode",{parentName:"li"},"object1")),(0,o.kt)("li",{parentName:"ul"},"The state value from ",(0,o.kt)("inlineCode",{parentName:"li"},"object2")," overwrites value from ",(0,o.kt)("inlineCode",{parentName:"li"},"object1")),(0,o.kt)("li",{parentName:"ul"},"The zip value from ",(0,o.kt)("inlineCode",{parentName:"li"},"object2")))))}u.isMDXComponent=!0}}]);